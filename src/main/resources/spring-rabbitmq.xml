<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/rabbit
	http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

	<!-- 读取配置文件 -->
	<context:property-placeholder location="classpath:rabbitmq.properties" />

	<!-- 连接服务配置 -->
	<rabbit:connection-factory id="connectionFactory"
		host="${mq.host}" username="${mq.username}" password="${mq.password}"
		port="${mq.port}" virtual-host="${mq.virtualhost}" channel-cache-size="1" />

	<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
	<rabbit:admin id="connectAdmin" connection-factory="connectionFactory" />
	
	<!--定义rabbit template用于数据的接收和发送 -->
	<rabbit:template id="amqpTemplate" connection-factory="connectionFactory" />
	
	<!-- 定义direct exchange -->
	<rabbit:direct-exchange name="spring.queue.exchange" durable="true" auto-delete="false">
		<!-- queue绑定到exchange -->
		<rabbit:bindings>
			<rabbit:binding key="spring.queue.key2" queue="spring.queue2" />
		</rabbit:bindings>
	</rabbit:direct-exchange>
	
	<!-- queue 队列声明 -->
	<rabbit:queue name="spring.queue1" durable="true" auto-delete="false" exclusive="false" />
	<rabbit:queue name="spring.queue2" durable="true" auto-delete="false" exclusive="false" />
	
	<!-- 消费类 -->
	<bean id="receiveMessageListener" class="com.wzl.rabbitmq.consumer.MessageConsumer" />
	
	<!-- queue litener 观察监听模式当有消息到达时会通知监听在对应的队列上的监听对象 -->
	<rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual" 
		concurrency="2" max-concurrency="3" prefetch="1" >
		<rabbit:listener queues="spring.queue1" ref="receiveMessageListener" />
		<rabbit:listener queues="spring.queue2" ref="receiveMessageListener" />
	</rabbit:listener-container>
	
	<!-- 自定义线程池，按顺序处理queue，根据配置的线程数先处理完一个queue的所有消息，再处理下一个queue的消息 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">          
	    <!-- 核心线程数，默认为1 -->          
	    <property name="corePoolSize" value="2" />
	    <!-- 最大线程数，默认为Integer.MAX_VALUE -->          
	    <property name="maxPoolSize" value="4" />
	    <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->          
	    <property name="queueCapacity" value="1000" />          
	    <!-- 线程池维护线程所允许的空闲时间，默认为60s -->          
	    <property name="keepAliveSeconds" value="300" />          
	    <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->          
	    <property name="rejectedExecutionHandler">          
	        <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->          
	        <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->          
	        <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->          
	        <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->          
	        <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />          
	    </property>          
	</bean>

</beans> 